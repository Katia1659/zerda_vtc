# config/packages/security.yaml
security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    
    enable_authenticator_manager: true

    # bcrypt : Utilise l'algorithme bcrypt pour hasher les mots de passe. C'est une pratique standard sécurisée.

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
        
        # app_user_provider : Utilise l'entité User pour la gestion des utilisateurs. Le champ email est utilisé pour l'identification.
        
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            jwt: ~
        main:
            lazy: true
            provider: app_user_provider
            json_login:
                check_path: /auth # The name in routes.yaml is enough for mapping
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/docs, roles: PUBLIC_ACCESS } # Allows accessing API documentations and Swagger UI docs
        - { path: ^/(auth|users|search-results), roles: PUBLIC_ACCESS }      
        - { path: ^/api/trips/geolocation, roles: PUBLIC_ACCESS }  
        - { path: ^/api/(accessibility|accessibilities|add-adress|bookings|brands|messages|models|order_statuses|orders|reports|password-reset|password-update), roles: ROLE_USER }
        - { path: ^/api/(accessibility|accessibilities|user$/[a-zA-Z0-9._%+-]+$|user$|bookings|brands|messages|models|order_statuses|orders|reports)/d+, roles: ROLE_USER }
    
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER # l'admin hérite des droits de l'user   


when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon